name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint_and_test_result:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'result')

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        working-directory: ./result
        run: npm install

      - name: Run code linting
        working-directory: ./result
        run: npm run lint || true  # Replace with the actual linting command if different

      - name: Run tests
        working-directory: ./result
        run: npm test || true  # Replace with the actual test command if different

  lint_and_test_vote:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'vote')

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install dependencies
        working-directory: ./vote
        run: pip install -r requirements.txt

      - name: Run tests for Vote app
        working-directory: ./vote
        run: python -m unittest discover  # Adjust to the test framework you're using

  build_and_push:
    runs-on: ubuntu-latest
    needs: [lint_and_test_result, lint_and_test_vote]
    if: github.event_name == 'push'

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: echo "${DOCKER_HUB_PASSWORD}" | docker login -u "${DOCKER_HUB_USERNAME}" --password-stdin

      - name: Build and push Docker images
        run: |
          docker-compose build
          docker-compose push
